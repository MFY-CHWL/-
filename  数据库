SQL (Structured Query Language) : 结构化查询语言

MySQL:关系型数据库

mysql配置文件路径系统为/etc/my.cnf
/etc/mysql/mysql.conf.d/mysqld.cnf




----------
show databases;      //展示数据库
create database gc;  //创建一个名叫gc的数据库
drop database gc;    //删除名叫gc的数据库



-----------
MySQL主要有三种数据类型：
文本类，数字类，日期类;
文本类：
CHAR(size):保存固定长度的字符串(可包含字母，数字以及特殊字符)。在括号中指定字符串长度，最多255个字符
VARCHAR(size):保存可变长度的字符串，size<=255,如果大于255，则被转换为TEXT类型。
TINYTEXT:存放最大长度为255个字符的字符串
TEXT:存放最大长度为65,535个字符的字符串
BLOB:用于BLOBs(Binary Large OBjects).最多存放65,535个字节
MEDIUMTEXT:16,777,215字符
MEDIUMBLOB:16,777,215字节
LONGTEXT: 4,294,967,295
LONGBLOB: 4,294,967,295
ENUM(x,y,z,etc.):

数字类：
TINYINT(size) -128-127   0-255
SAMLLINT(size) -32768-32767 0-65535
INT(size) -2147...
BIGINT(size) 64位
FLOAT(size,d)
DOUBLE(size,d)

日期类
DATA():       日期YYYY-MM-DD
DATATIME():    YYYY-MM-DD HH:MM:SS
TIME():
YEAR();


-----------------
use database_name; //进入某个数据库

show tables; //看数据库的表

create table teble_name(
	colum_name data_type,
	colum_name data_type,
	colum_name data_type,
	..
	colum_name data_type,
);   //创建数据库表

CREATE TABLE account(
	id bigint(20);
	createTime datatime,
	ip varchar(255),
	moblie varchar(255),
	nickname varchar(255),
	passwd varchar(255),
	username varchar(255),
	avatar varchar(255),
	brief text,
	job varchar(255),
	location varchar(255),
	qq varchar(255),
	gender int(11),
	city varchar(255),
	province varchar(255)
);

describe account; //展示一个表

drop table table_name //删除数据库表


---------------------
增加一个列
alter table [table_name] add [column_name] [data_type]
[not null][default]

alter table account add c1 int(11) not null default 1;


删除一个列
alter table [table_name] drop [column_name]
alter table account drop c1;


-------------------
修改列的信息
alter table [table_name] change [old_column_name] [new_column_name] [data_type]

1.只改列名：
data_type和原来一样，old_column_name != new_column_name

2.只改数据类型:
old_column_name == new_column_name, data_type改变

3.列名和数据类型都改变


修改表名
alter table [table_name] rename [new_table_name]

alter table account rename newaccount;

------------------
查看表数据

select * from [table_name];
查看整张表的所有数据

select col_name1, col_name2,... from [table_name];
查看特定表

插入数据
insert into [table_name] values(值1,值2...)
insert into book values(1, 'thah', 'content');

insert into [table_name] (列1,列2....) values(值1,值2...)
insert into book(title) values('content')



----------------------
where条件查询
select * from [table_name] where [col_name] 运算符 值
select * from book where title = 't';

运算符：=,!=,>,<,>=,<=
	between 在两个值之间查找
	like	按某个模式查找


组合条件and,or

select * from table_name where col1 = xxx and col2 = xx or col3 > xx
还可以使用括号

-----------------------
where的null字符判断
select * from [table_name] where [col_name] is null
select * from [table_name] where [col_name] is not null
无法用等号判断null

---------------------
select distinct

select distinct [col_name] from [table_name];

select distinct title from book;
展示出来所有不同title

select distinct title,content from book;
(title,content组合不同)


----------------------
使用order by对查询结果排序
1.按单一列名排序：
select * from [table_name] [where 子句] order by [col_name] [asc/desc]

2.按多列排序:
select * from [table_name] [where 子句] order by [col_name1] [asc/desc] [col_name2] [asc/desc]
select * from book where pagse > 0 order by content desc, pages asc;

不加asc或者desc时，默认为asc

-------------------
使用limit截取查询结果

select * from [table_name] [where子句] [order by子句] limit[offset,] rowCount

offset可不填

tips:limit rowCount = limit 0, rowCount

select * from book order by id limit 2,2;

-------------------
insert into 和 select组合使用

insert into [表名1] select 列1,列2 from [表名2]
insert into [表名1](列1,列2) select 列3,列4 from [表名2]

-----------------
更新表数据

update [表名] set 列名 = xxx [where子句]

update [表名] set 列名1 = xxx, 列名2 = xxx..[where子句]

update book set content = 'nice day' where id = 3
update book set content = 'nice day',title = 'headache' where id = 3

------------------------

where语句中in操作符的使用
select * from [表名] where 列名 in (value1, value2...)

select * from [表名] where 列名 in (select 列名 from 表名)



-----------------------	

where语句中between操作符的使用

select * from 表名 where 列名 between 值1 and 值2
select * from 表名 where 列名 not between 值1 and 值2

----------------------------

where语句中like操作符
select * from 表名 where 列名 [not] like pattern

pattern:匹配模式，比如'abc','%abc' %是一个通配符

----------------------------
Redis:
1.独特的键值对模型，Redis的值不仅可以是字符串，还可以是其他5种数据结构任意一种
字符串，列表，散列，集合，有序集合
2.内存存储数据库
MySQL是硬盘存储数据库，加索引就是把索引数据放在内存里，从而变快，在内存查询，在硬盘拿。
3.持久化功能
将数据保存在硬盘里，保证安全，备份。
4.过期键功能
为键设置一个时间，让他在指定的时间后自动删除
5.事务功能
原子的执行多个操作，并提供乐观锁的功能，保证处理数据时的安全性。


---------------------------------
mysql插件式存储引擎架构将查询处理查询处理和其他的系统任务以及数据的存储提取分离

1.连接层
最上层是一些客户端和连接服务，包含本地sock通信和大多数基于客户端/服务端工具实现的类似于tcp/ip的通信。主要完成一些类似于连接处理，授权认证及相关的安全方案。
在该层上引入了线程池的概念，为通过认证安全接入的客户端提供线程。同样在该层上可以实现基于SSL的安全链接。服务器也会为安全接入的每个客户端验证它所具有的操作权限。

2.服务层
第二层架构主要完成核心服务功能，如SQL接口，并完成缓存的查询，SQL的分析和优化及部分内置函数的执行。所有跨存储引擎的功能也在这一层实现，如过程，函数等。
在该层，服务器会解析查询并创建相应的内存解析树，并对其完成相应的优化如确定查询表的顺序，是否利用索引等，最后生成相应的执行操作。如果是select语句，服务器还会查询内部的缓存。如果缓存空间足够大，这样在解决大量读操作的环境中能够很好的提升系统的性能。

3.引擎层
存储引擎层，存储引擎真正的负责了MySQL中数据的存储和提取，服务器通过API与存储引擎进行通信。不同的存储引擎具有的功能不同，这样我们可以根据自己的实际需要进行选取。
InnoDB MyISAM


4.存储层
数据存储层，主要是将数据存储在运行于裸设备的文件系统之上，并完成与存储引擎的交互。

-----------------------------
存储引擎
show engines; //查看所有的引擎

show variables like '%storage_engine%'; //查看当前和默认的存储引擎

对比项				MyISAM				InnoDB
主外键				不支持				支持
事务				不支持				支持
行表锁				表锁，即使操作一条记录也会	行锁，操作只锁某一行。
				锁住整个表，不适合高并发		适合高并发
缓存				只缓存索引，不缓存真实数据	不仅缓存索引还缓存真实数据，
								对内存要求较高，且内存大小对
								性能有决定性影响。
表空间				小				大
关注点				性能				事务
默认安装			Y				Y



-------------------------------
性能下降SQL原因

1.查询语句写的烂
2.索引失效
单值索引：
select * from user where name='.';
create index idx_user_name on user(name);
复合索引: 
select * from user where name='.' and email='';
create index idx_user_nameEmail on user(name,email); 
3.关联查询太多join(设计缺陷或不得已的需求）

4.服务器调优及各个参数设置（缓冲，线程数）

---------------------

SQL执行加载顺序
手写：
SELECT DISTINCT
	<select_list>
FROM
	<left_table> <join_type>
JOIN 	<rigth_table> ON <join_condition>
WHERE
	<where_condition>
GROUP BY
	<group_by_list>
HAVING
	<having_condition>
ORDER BY
	<order_by_condition>
LIMIT <limit number>


机读：
FROM <left_table>
ON <join_condition>
<join_type> JOIN <right_table>
WHERE <where_condition>
GROUP BY<group_by_list>
HAVING
SELECT
ORDER BY
LIMIT

-------------
JOIN理论

select [select_list] from [table_name] INNER JOIN [tableb_name] on [A.key = B.key];

select [select_list] from [table_name] LEFT JOIN [tableb_name] on [A.key = B.key];

select [select_list] from [table_name] RIGHT JOIN [tableb_name] on [A.key = B.key];

select [select_list] from [table_name] INNER JOIN [tableb_name] on [A.key = B.key] where [B.key] is NULL;

select [select_list] from [table_name] INNER JOIN [tableb_name] on [A.key = B.key] where
[A.key] is NULL;

select [select_list] from [table_name] FULL OUTER JOIN [tableb_name] on [A.key = B.key];

select [select_list] from [table_name] FULL OUTER JOIN [tableb_name] on [A.key = B.key] where [A.key] is NULL or [B.key] is NULL;

 
---------------------------

select * from tbl_emp a inner join tbl_dept b on a.depId=b.id;

得到全部连接表
select * from tbl_emp a left join tbl_dept b on a.depId=b.id
union
select * from tbl_emp a right join tbl_dept b on a.depId=b.id;

得到A独有和B独有的连接表
select * from tbl_emp a left join tbl_dept b on a.depId=b.id where b.id is null
union
select * from tbl_emp a right join tbl_dept b on a.depId=b.id where b.id is null

----------------------------------
索引是什么

索引是帮助MySQL高效获取数据的数据结构
索引是数据结构，排好序的快速查找数据结构。
两大功能：查找，排序


数据本身之外，数据库还维护着一个满足特定查找算法的数据结构，这些数据结构以某种方式指向数据，这样就可以在这些数据结构的基础上实现高级查找算法，这种数据结构就是索引。

索引本身也很大，不可能全部存储在内容中，因此索引往往以索引文件的形式存储在磁盘上。


-----------------------------------
索引优势：
1.提高数据检索效率，降低数据库IO成本
2.降低数据排序成本，降低CPU消耗。

劣势：
1.实际上索引也是一张表，该表保存了主键与索引字段，占用空间。
2.降低更新操作,INSERT,UPDATE,DELETE.因为更新表时，还要额外改一下索引。
3.索引只是提高效率的一个因素，如果MySQL有大数据量的表，需要花时间研究建立最优秀的索引。


-------------------------------
索引分类

1.单值索引：一个索引只包含单个列，一个表可以有多个单列索引

2.唯一索引：索引列的值必须唯一，允许NULL

3.复合索引：一个索引包含多个列

创建 CREATE [UNIQUE] INDEX idexName ON mytable(columnname(length));
     ALTER mytable ADD [UNIQUE] INDEX [indexname] on columnname(length);
     
删除 DROP INDEX [indexName] ON mytable;

查看 SHOW INDEX FROM table_name

----------------------------
三层B+树可以表示上百万数据

--------------------------

适合建索引：

1.主键自动建立唯一索引
2.频繁作为查询的
3.查询中与其他表关联的字段，外键关系
4.频繁更新的不要键
5.where用不到的不用键
6.高并发倾向组合索引
7.排序字段若建立索引将提高排序速度
8.group by

不适合：
1.表记录很少
2.经常update
3.数据重复且分布平均
----------------------------
性能分析

MySQL Query Optimizer
CPU:
IO:
服务器硬件的性能瓶颈:top,free,iostat

-----------------
explain

使用explain关键字可以模拟优化器执行SQL查询语句，从而知道MySQL是如何处理你的SQL语句。分析你的查询语句或是表结构的性能瓶颈。

explain + SQL语句
explain select * from [table_name]

explain能干嘛：
1.表的读取顺序
2.数据读取操作的操作类型
3.哪些索引可以使用
4.哪些索引被实际使用
5.表之间的引用
6.每张表有多少行被优化器查询

explain得到的表头
id select_type table type possible_keys key key_len ref rows Extra
----------------------------------
id:
select查询的序列号，包含一组数字，表示查询中执行select子句或操作表的顺序
1.id相同，执行顺序从上到下。
2.id不同，id值越大越先执行。
3.id相同不同，同时存在。
从id可以得到表的读取顺序

---------------------------------------
select_type:
1.SIMPLE		简单的select查询，查询中不包含子查询或者UNION
2.PRIMARY		最外层的，最后查询的				
3.SUBQUERY		子查询
4.DERIVED		在FROM列表中包含的子查询被标记为DERIVED,
			MySQL会递归执行这些子查询，把结果放在临时表里
5.UNION			若第二个SELECT出现在UNION之后，则被标记为UNION;
			若UNION包含在FROM子句的子查询中，外层SELECT被标记为：DERIVED
6.UNION RESULT		从UNION表获取结果的SELECT

数据读取操作的操作类型
------------------------------------------------

table:显示这一行数据是关于哪张表的

--------------------------------

type:访问类型
从好到坏
system > const > eq_ref > ref > range > index > ALL

达到range级别，最好达到ref级别

1.system			表只有一行记录（等于系统表），这是const类型的特例。

2.const 			表示通过索引一次就找到了，const用于比较primary key或者unique索
				引，因为只匹配一行数据，所以很快。如将主键置于where列表中MySQ
				L就能将该查询转换为一个常量。
				explain select * from (select * from t1 where id = 1) d1;

3.eq_ref			唯一性索引扫描，对于每个索引键，表中只有一条记录与之匹配，常见于主键
				explain select * from t1,t2 where t1.id = t2.id;

4.ref				非唯一性索引扫描，返回匹配某个单独值的所有行，查找扫描的混合体。
				explain select * from t1 where cnt1 = 'ac';	

5.range				只检索给定范围的行，使用一个索引来选择行，key列显示使用了哪个索引
				explain SELECT * FROM t1 wher id between 30 and 36

6.index				Full Index Scan,只遍历索引树.
				explain select id from t1;

7.all				explain select * from t1;


-------------------------------------------------------
possible keys:显示可能用在这张表中的索引，但不一定被使用。

keys:实际用到的索引。如果为NULL,则没有使用。查询中若使用了覆盖索引，则该索引出现在key列表中。

key_len:表示索引中使用的字节数，在不损失精确性的情况下，长度越短越好
explain select * from t1 where clo1 = 'ab'; key_len = 13;
explain select * from t1 where clo1 = 'ab' and col2 = 'cd'; key_len = 26;
-----------------------------------------------------------

ref:显示索引的哪一列被使用了，如果可能的话，是一个常数。那些列或常量被用于查找索引上的值。

---------------------------------------------------
rows:根据表统计信息及索引选用情况，大致估算出找到所需记录所需要读取的行数。

---------------------------------------------
Extra:
1.Using filesort（危险:	无法利用索引完成的排序操作成为"文件排序“
	explain select clo1 from c1 wher clo1 = 'ac' order by col3;
	explain select clo1 from c1 wher clo1 = 'ac' order by col2,col3;

2.using temporary(危险:使用了临时表保存中间结果，常用于order by和group by
		explain select col1 from t1 where col1 in ('ac', 'ab', 'aa') group by col2
		explain select col1 from t1 where col1 in ('ac', 'ab', 'aa') group by col1,col2

3.using index: 表明了使用覆盖索引。如果出现using where ，表明用来执行索引键值查找。
				没有就没有查找。

覆盖索引：select数据列只从索引中就能获得，不必读取数据行。
如果要使用，要使用只需要的列。
------------------------------------------------
索引优化单表分析
查询category_id为1且comments大于1的情况下，views最多的article_id
EXPLAIN SELECT id,author_id FROM article WHERE category_id=1 AND comments>1 oder by views DESC LIMIT 1;

type: ALL
Extra:Using where; Using filesort

show index from article;
只有一个主键
建立索引：
create index idx_article_ccv on article(category_id, comment,views);

在进行分析：
EXPLAIN SELECT id,author_id FROM article WHERE category_id=1 AND comments>1 oder by views DESC LIMIT 1;
type:变成了range
Extra:Using filesort


EXPLAIN SELECT id,author_id FROM article WHERE category_id=1 AND comments=1 oder by views DESC LIMIT 1;

type: 变成了ref 
Extra: 

DROP INDEX idx_article_cvv ON article;

create index idx_article_cv on article(category_id, views);

type:ref
Extra:
理想情况达成

----------------------------------------------------------------------

索引优化两表分析
explain select * from class left join book on class.card = book.card;

左链接加载右表book
右连接加载左表



--------------------------------------------------------

索引优化三表分析

explain select * from class left join book on class.card=book.card left join phone on book.card=phone.card;

alter table 'phone' add index z('card');

alter table 'book' add index z('card');

--------------------
索引优化1

索引失效：
1.全值匹配我最爱
2.最佳左前缀法则
3.不再索引列上做任何操作（计数，函数（自动or手动）类型转换），会导致索引失效而转向全表扫描。
4.存储引擎不能使用索引中范围条件右边的列
5.尽量使用覆盖索引（只访问索引的查询（索引列和查询列一致)),减少select*
6.mysql在使用不等于(!=或<>)的时候无法使用索引会导致全表扫描
7.is null, is not null也无法使用索引
8.like以通配符开头('%abc..')mysql索引失效会变成全表扫描的操作
9.字符串不加单引号索引失效
10少用or，用它来连接时索引失效。

1.假设建立了(a,b,c)索引
 但是只查询b,c会导致无效。

2.中间不能断 查询(a,c)

3.explain select * from staffs where name="July';
  explain select * from staffs where left(NAME,4)="July';

4.explain select * from staffs where name='July' AND age > 25 and pos='manager';
  age>25之后的失效，但是age也是用到了

5.explain select name,age,pos from staffs where name='July' AND age > 25 and pos='manager';
   会用using index.

6.explain select * from staffs where name !='July';
  type:ALL
	
7.explain select * from staffs where name is null;

8.
用覆盖索引来解决all
select * from tbl_user where name like '%aa%';
type:all

create index idx_user_nameage on user(name,age);
select name,age from user where name like '%aa%';
type:index

9.explain select * from staffs where name = '200'
type:ref
explain select * from staffs where name = 200
type:all

10.explain select * from staffs where name='July' or id=5;


------------------------------

小表驱动大表
1)for(int i = 0; i < 5; ++i)
	for(int j = 0; j < 1000; ++j)


2)for(int i = 0; i < 1000; ++i)
	for(int j = 0; j < 5; ++j)


用第一种，小表驱动大表，只建立了5次连接。
而第二次要建立1000次。

select * from A where id in (select id from B)
等价于
for select id from B
for select * from A where A.id=B.id

当B表的数据解小于A表的数据集时，用in优于exists.

select * from A where exists(select 1 from B.id = A.id)
等价于
for select * from A
for select * from B where B.id = A.id

当A表数据集小于B的时候用exist优
讲主查询的数据，放到子查询中做条件验证，根据验证结果来决定主查询数据是否得以保留。

select * from tbl_emp e where e.depId in (select id from tbl_dept d);
select * from tbl_emp e where exists (select 1 from tbl_dept d where d.id = e.deptId);
----------------------------

order by优化：
尽量使用index,不要filesort

create index idx_A_ageBirth on tblA(age,birth);

explain SELECT * FROM tblA where age>20 order by age;不会产生using filesort

explain SELECT * FROM tblA where age>20 order by birth;会产生using filesort

explain SELECT * FROM tblA where age>20 order by age ASC,birth DESC;会产生using filesort.

filesort两种算法：

MySQL
4.1前双路排序算法，是两次磁盘IO。读取行指针和orderby的列，对他们排序，然后扫描已经排序好的列表
之后是单路排序算法，

优化：
1.select * 最好不要和order by搭配 ，容易把sort_buffer缓冲区用满

2.尝试提高sort_buffer_size

3.尝试提高max_length_for_sort_length.


MySQL两种排序方法：文件排序或扫描有序索引排序
MySQL能为排序与查询使用相同的索引


----------------------------------------------
group by优化：
group by实际上是先排序后分组
where高于having，能where别having

------------------------------------

慢查询日志：
SHOW VARIABLES LIKE '%slow_query_log%'
开启 
get global slow_query_log=1;
只对当前数据库生效，若MySQL重启后失效。

查看当前多少秒算慢：SHOW VARIABLES LIKE 'long_query_time%';

设置慢的阙值：set global long_query_time=3;

mysqldumpslow -s r -t 10 /var/lib/mysql/atguigu-slow.log

--------------------------------------


批量数据脚本

函数有返回值，存储过程没有

1.建表 

2.
show variable like 'log_bin_trust_function_creators';
set global log_bin_trust_function_creators=1;

3.创建数据
*创建函数
DELIMITER $$
CREATE FUNCTION rand_string (n INT) RETURNS CARCHAR(255) 
BEGIN
	DECLARE chars_str VARCHAR(100) DEFAULT 'abcdefg...zABCD..Z'
	DECLARE return_str VARCHAR(100) DEFAULT '';
	DECLARE i INT DEFAULT 0;
	WHILE i < n DO
	SET return_str = CONCAT(return_str,SUBSTRING(chars_set,FLOOR(1+RAND()*52),1));
	SET i = i + 1;
	END WHILE;
	RETURN retrun_set;
END $$


DELIMITER $$
CREATE FUNCTION rand_num () RETURNS INT(5) 
BEGIN
	DECLARE i INT DEFAULT 0;
	SET i = FLOOR(100+RAND()*10);
	RETURN i;	
END $$


*创建过程
DELIMITER $$
CREATE PROCEDURE insert_emp(IN START INT(10), IN max_num INT(10))
BEGIN
	DECLARE i INT DEFAULT 0;
	set autocommit = 0;
	REPEAT
	SET i = i + 1;
	INSERT INTO emp(empno, ename, job, mgr, hiredate, sal, comm, deptno) VALUES ((START+i), rand_string(6), 'SALESMAN',0001,CURD));
	UNTIL i = max_num
	END REPEAT
	COMMIT;
END $$


------------------------------------

数据库锁理论

琐是计算机协调多个进程或线程并发访问某一资源的机制。

锁的分类：
操作类型：读/写锁   
操作粒度：行/表锁

表锁（偏读）：偏向MyISAM存储引擎，开销小，加锁快，无死锁，并发度最低

增加表锁：
lock table [名字] read(write), [名字] read(write), 其它;
查看表上的锁：
show open tables;

释放锁：
unlock tables;

如果表被读锁 锁了，就不能修改被锁表了，也不能在读别的表了。
同时别的终端可以读被锁表，不能修改被锁表，会一直阻塞。

如果表被写锁 锁了，自己能读写自己锁住的表，还是不能读别的表。
同时别的终端不能读被锁表，会一直阻塞。


读锁会阻塞读写，但是不会阻塞读。而写锁则会把读和写都阻塞。

分析表锁定：
通过检查table_locks_waited和table_locks_immediate状态变量来分析系统上的表锁定。
show status like 'table%';

Table_locks_immediate:产生表级锁定的次数，表示可以立即获取锁的查询次数，每立即获取锁值加1/
Table_locks_waited:出现表级锁定争用而发生等待的次数，每等待一次+1。，此值较高说明存在着较严重的表级锁争用情况。

------------------------------------------------
行锁（偏写）：偏向InnoDB存储引擎，开销大,加锁慢;会出现死锁;锁定粒度小，发生锁冲突的概率最低，并发读最高
InnoDB与MyISAM最大不同：支持事务，采用行级锁。

事务：事务是由一组SQL语句组成的逻辑处理单元，事务具有以下4个属性
原子性（Atomicity）：事务是一个原子操作单元，其对数据的修改，要么全都执行，要么全都不执行。。
一致性（Consistent）：在事务开始和完成时，数据都必须保持一致状态。这意味着所有相关的数据规则都必须应用于事务的修改，以保持数据的完整性，事务结束时，所有的内部数据结构也都必须是正确的。
隔离行（Isolation）：事务处理过程的中间状态对外部是不可见的，反之亦然。
持久性（Durable）：事务完成后，修改是永久的，即使系统出现故障也能保持。

并发事务：
更新丢失，脏读，不可重复读，幻读

脏读是读到了修改数据，幻读是读到了新增数据。

查看当前数据库的事务隔离级别
show variables like 'tx_isolation'

未提交读
已提交读
可重复读
可序列化

varchar类型如果不写单引号可能会导致行锁变表锁。

-------------------------------
间隙锁
当我们用范围条件而不是相等条件检索数据，并请求共享或排他锁时，InnoDB会给符合条件的已有数据记录的索引项加锁，对于键值在条件范围内但不存在的记录，叫做“间隙（GAP）”
InnoDB也会对这个“间隙”加锁，这种锁机制就是所谓的间隙锁。

危害：
因为query执行过程中通过范围来查找的话，她会锁定整个范围内的所有索引键值，即使这个键值不存在。
间隙锁造成锁定时无法插入锁定键值范围内的任何数据。

update table set b = '0628' where a>1 and a<6;
insert into table values(2,'2000');
第二个insert在第一个操作commit前无法完成，会进行阻塞。



---------------------------
如何锁定一行

begin;

select * from test_innodb_lock where a=8 for update;//锁定


commit;

----------------------------

show status like 'innodb_row_lock%';
查看行锁状态
---------------------------

主从复制：


